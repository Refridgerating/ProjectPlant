import { describe, it, expect } from "vitest";
import { EXAMPLE_MONSTERA_PROFILE, createDefaultGuidanceEngine, RuleBasedCareEngine } from "../src";

describe("Guidance engine", () => {
  it("produces indoor and outdoor guidance blocks from a profile", () => {
    const engine = createDefaultGuidanceEngine();
    const blocks = engine.render(EXAMPLE_MONSTERA_PROFILE);

    const contexts = blocks.reduce<Record<string, number>>((acc, block) => {
      acc[block.context] = (acc[block.context] ?? 0) + 1;
      return acc;
    }, {});

    expect(contexts.general).toBeGreaterThan(0);
    expect(contexts.indoor).toBeGreaterThan(0);
    expect(contexts.outdoor).toBeGreaterThan(0);

    const indoorLight = blocks.find((block) => block.id === "indoor_light");
    expect(indoorLight?.summary).toContain("bright");
  });

  it("operates on profiles generated by the rule-based engine", async () => {
    const ruleEngine = new RuleBasedCareEngine();

    const profile = ruleEngine.map({
      target: { taxon: { canonicalName: "Test Plant", powoId: "test", inatId: 1 } },
      signals: {
        powo: {
          raw: {} as never,
          context: { fetchedAt: "now", fromCache: false },
          signals: {
            lifeforms: ["Succulent"],
            habitats: ["desert scrub"],
            textSnippets: [{ heading: "Habitat", text: "A desert scrub succulent needing bright sun." }]
          }
        },
        inat: {
          raw: {} as never,
          context: { fetchedAt: "now", fromCache: false },
          signals: {
            globalEstablishment: "native"
          }
        }
      }
    });

    const engine = createDefaultGuidanceEngine();
    const blocks = engine.render(profile);
    expect(blocks.length).toBeGreaterThan(0);
  });
});
